<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZhiYinQ</title>
  
  <subtitle>业精于勤荒于嬉，行成于思毁于随</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github3982.github.io/"/>
  <updated>2019-09-04T03:28:55.792Z</updated>
  <id>https://github3982.github.io/</id>
  
  <author>
    <name>HongNimA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown 基本语法在 Ocean 中的展现形式</title>
    <link href="https://github3982.github.io/2019/08/15/md%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>https://github3982.github.io/2019/08/15/md - 副本/</id>
    <published>2019-08-15T05:25:43.000Z</published>
    <updated>2019-09-04T03:28:55.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 <a href="https://github.com/younghz/Markdown" title="younghz/Markdown" target="_blank" rel="noopener">younghz/Markdown</a> Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！</p><a id="more"></a><hr><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><blockquote><p>Markdown是什么？</p><p>谁创造了它？</p><p>为什么要使用它？</p><p>怎么使用？</p><p>谁在用？</p><p>尝试一下</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>1. Markdown是什么？</strong><br><strong>Markdown</strong>是一种轻量级标记语言，它以纯文本形式<em>(易读、易写、易更改)</em>编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p><p><strong>2. 谁创造了它？</strong><br>它由<a href="http://www.aaronsw.com/" title="Aaron Swartz" target="_blank" rel="noopener">Aaron Swartz</a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（2013年1月11日）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" title="介绍" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：</p><ul><li>14岁参与RSS 1.0规格标准的制订。</li><li>2004年入读斯坦福，之后退学。</li></ul><ul><li>2005年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<br><a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。</li><li>2010年创立求进会（Demand Progress），积极参与禁止网络盗- 版法案（SOPA）活动，最终该提案被撤回。</li><li>2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并- - 以免费形式上传于网络被捕。</li><li>2013年1月自杀身亡。</li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt></p><p>天才都有早逝的归途。</p><p><strong>3. 为什么要使用它？</strong></p><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><p><strong>4. 怎么使用？</strong></p><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。<br>Markdown语法主要分为如下几大部分：<br><strong>标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a><strong>4.1 标题</strong></h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>2）使用#，可表示1-6级标题。</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>效果：</p><blockquote><h1 id="一级标题-2"><a href="#一级标题-2" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-2"><a href="#二级标题-2" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题-1"><a href="#四级标题-1" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题-1"><a href="#五级标题-1" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题-1"><a href="#六级标题-1" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a><strong>4.2 段落</strong></h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a><strong>4.3 区块引用</strong></h4><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p><blockquote><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote></blockquote><p>效果：</p><blockquote><p>区块引用</p></blockquote><blockquote><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a><strong>4.4 代码区块</strong></h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p><p>代码区块：</p><pre><code>void main(){    printf(“Hello, Markdown.”);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a><strong>4.5 强调</strong></h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><p>效果：</p><blockquote><ul><li>斜体 *，_ 斜体 _</li></ul></blockquote><blockquote><p>** 粗体 **，__ 粗体 __</p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a><strong>4.6 列表</strong></h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项</p><ul><li>（+*）第三项</li></ul></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项<br>-（+*） 第三项</p></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a><strong>4.7 分割线</strong></h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a><strong>4.8 链接</strong></h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br>行内式：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https://zhwangart.github.io/2018/11/29/Markdown/://github.com/younghz/Markdown" title="younghz的Markdown库。" target="_blank" rel="noopener">younghz的Markdown库</a></p></blockquote><h4 id="参考式："><a href="#参考式：" class="headerlink" title="参考式："></a><strong>参考式：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”</p></blockquote><h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a><strong>效果：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”<br>[2]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”</p></blockquote><p><strong>注意：</strong>上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a><strong>4.9 图片</strong></h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a><strong>4.10 反斜杠\</strong></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a><strong>4.11 符号’`’</strong></h4><p>起到标记作用。如：</p><pre><code>\`ctrl+a`\</code></pre><p>效果：</p><blockquote><p><code>ctrl+a</code></p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a><strong>5. 谁在用？</strong></h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a><strong>6. 尝试一下</strong></h4><ul><li><strong>Chrome</strong>下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错</li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。</li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><p>–<br><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><p>–</p><p>以上基本是所有traditonal markdown的语法。</p><p><strong>其它：</strong></p><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 &lt;a href=&quot;https://github.com/younghz/Markdown&quot; title=&quot;younghz/Markdown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;younghz/Markdown&lt;/a&gt; Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="md" scheme="https://github3982.github.io/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本语法在 Ocean 中的展现形式</title>
    <link href="https://github3982.github.io/2019/08/15/md%20-%20%E5%89%AF%E6%9C%AC%20(2)/"/>
    <id>https://github3982.github.io/2019/08/15/md - 副本 (2)/</id>
    <published>2019-08-15T05:25:43.000Z</published>
    <updated>2019-09-04T03:28:55.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 <a href="https://github.com/younghz/Markdown" title="younghz/Markdown" target="_blank" rel="noopener">younghz/Markdown</a> Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！</p><a id="more"></a><hr><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><blockquote><p>Markdown是什么？</p><p>谁创造了它？</p><p>为什么要使用它？</p><p>怎么使用？</p><p>谁在用？</p><p>尝试一下</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>1. Markdown是什么？</strong><br><strong>Markdown</strong>是一种轻量级标记语言，它以纯文本形式<em>(易读、易写、易更改)</em>编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p><p><strong>2. 谁创造了它？</strong><br>它由<a href="http://www.aaronsw.com/" title="Aaron Swartz" target="_blank" rel="noopener">Aaron Swartz</a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（2013年1月11日）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" title="介绍" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：</p><ul><li>14岁参与RSS 1.0规格标准的制订。</li><li>2004年入读斯坦福，之后退学。</li></ul><ul><li>2005年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<br><a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。</li><li>2010年创立求进会（Demand Progress），积极参与禁止网络盗- 版法案（SOPA）活动，最终该提案被撤回。</li><li>2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并- - 以免费形式上传于网络被捕。</li><li>2013年1月自杀身亡。</li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt></p><p>天才都有早逝的归途。</p><p><strong>3. 为什么要使用它？</strong></p><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><p><strong>4. 怎么使用？</strong></p><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。<br>Markdown语法主要分为如下几大部分：<br><strong>标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a><strong>4.1 标题</strong></h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>2）使用#，可表示1-6级标题。</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>效果：</p><blockquote><h1 id="一级标题-2"><a href="#一级标题-2" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-2"><a href="#二级标题-2" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题-1"><a href="#四级标题-1" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题-1"><a href="#五级标题-1" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题-1"><a href="#六级标题-1" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a><strong>4.2 段落</strong></h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a><strong>4.3 区块引用</strong></h4><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p><blockquote><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote></blockquote><p>效果：</p><blockquote><p>区块引用</p></blockquote><blockquote><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a><strong>4.4 代码区块</strong></h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p><p>代码区块：</p><pre><code>void main(){    printf(“Hello, Markdown.”);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a><strong>4.5 强调</strong></h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><p>效果：</p><blockquote><ul><li>斜体 *，_ 斜体 _</li></ul></blockquote><blockquote><p>** 粗体 **，__ 粗体 __</p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a><strong>4.6 列表</strong></h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项</p><ul><li>（+*）第三项</li></ul></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项<br>-（+*） 第三项</p></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a><strong>4.7 分割线</strong></h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a><strong>4.8 链接</strong></h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br>行内式：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https://zhwangart.github.io/2018/11/29/Markdown/://github.com/younghz/Markdown" title="younghz的Markdown库。" target="_blank" rel="noopener">younghz的Markdown库</a></p></blockquote><h4 id="参考式："><a href="#参考式：" class="headerlink" title="参考式："></a><strong>参考式：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”</p></blockquote><h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a><strong>效果：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”<br>[2]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”</p></blockquote><p><strong>注意：</strong>上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a><strong>4.9 图片</strong></h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a><strong>4.10 反斜杠\</strong></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a><strong>4.11 符号’`’</strong></h4><p>起到标记作用。如：</p><pre><code>\`ctrl+a`\</code></pre><p>效果：</p><blockquote><p><code>ctrl+a</code></p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a><strong>5. 谁在用？</strong></h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a><strong>6. 尝试一下</strong></h4><ul><li><strong>Chrome</strong>下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错</li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。</li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><p>–<br><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><p>–</p><p>以上基本是所有traditonal markdown的语法。</p><p><strong>其它：</strong></p><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 &lt;a href=&quot;https://github.com/younghz/Markdown&quot; title=&quot;younghz/Markdown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;younghz/Markdown&lt;/a&gt; Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="md" scheme="https://github3982.github.io/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本语法在 Ocean 中的展现形式</title>
    <link href="https://github3982.github.io/2019/08/15/md%20-%20%E5%89%AF%E6%9C%AC%20(3)/"/>
    <id>https://github3982.github.io/2019/08/15/md - 副本 (3)/</id>
    <published>2019-08-15T05:25:43.000Z</published>
    <updated>2019-09-04T03:28:55.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 <a href="https://github.com/younghz/Markdown" title="younghz/Markdown" target="_blank" rel="noopener">younghz/Markdown</a> Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！</p><a id="more"></a><hr><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><blockquote><p>Markdown是什么？</p><p>谁创造了它？</p><p>为什么要使用它？</p><p>怎么使用？</p><p>谁在用？</p><p>尝试一下</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>1. Markdown是什么？</strong><br><strong>Markdown</strong>是一种轻量级标记语言，它以纯文本形式<em>(易读、易写、易更改)</em>编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p><p><strong>2. 谁创造了它？</strong><br>它由<a href="http://www.aaronsw.com/" title="Aaron Swartz" target="_blank" rel="noopener">Aaron Swartz</a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（2013年1月11日）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" title="介绍" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：</p><ul><li>14岁参与RSS 1.0规格标准的制订。</li><li>2004年入读斯坦福，之后退学。</li></ul><ul><li>2005年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<br><a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。</li><li>2010年创立求进会（Demand Progress），积极参与禁止网络盗- 版法案（SOPA）活动，最终该提案被撤回。</li><li>2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并- - 以免费形式上传于网络被捕。</li><li>2013年1月自杀身亡。</li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt></p><p>天才都有早逝的归途。</p><p><strong>3. 为什么要使用它？</strong></p><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><p><strong>4. 怎么使用？</strong></p><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。<br>Markdown语法主要分为如下几大部分：<br><strong>标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a><strong>4.1 标题</strong></h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>2）使用#，可表示1-6级标题。</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>效果：</p><blockquote><h1 id="一级标题-2"><a href="#一级标题-2" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-2"><a href="#二级标题-2" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题-1"><a href="#四级标题-1" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题-1"><a href="#五级标题-1" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题-1"><a href="#六级标题-1" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a><strong>4.2 段落</strong></h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a><strong>4.3 区块引用</strong></h4><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p><blockquote><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote></blockquote><p>效果：</p><blockquote><p>区块引用</p></blockquote><blockquote><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a><strong>4.4 代码区块</strong></h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p><p>代码区块：</p><pre><code>void main(){    printf(“Hello, Markdown.”);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a><strong>4.5 强调</strong></h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><p>效果：</p><blockquote><ul><li>斜体 *，_ 斜体 _</li></ul></blockquote><blockquote><p>** 粗体 **，__ 粗体 __</p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a><strong>4.6 列表</strong></h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项</p><ul><li>（+*）第三项</li></ul></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项<br>-（+*） 第三项</p></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a><strong>4.7 分割线</strong></h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a><strong>4.8 链接</strong></h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br>行内式：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https://zhwangart.github.io/2018/11/29/Markdown/://github.com/younghz/Markdown" title="younghz的Markdown库。" target="_blank" rel="noopener">younghz的Markdown库</a></p></blockquote><h4 id="参考式："><a href="#参考式：" class="headerlink" title="参考式："></a><strong>参考式：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”</p></blockquote><h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a><strong>效果：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”<br>[2]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”</p></blockquote><p><strong>注意：</strong>上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a><strong>4.9 图片</strong></h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a><strong>4.10 反斜杠\</strong></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a><strong>4.11 符号’`’</strong></h4><p>起到标记作用。如：</p><pre><code>\`ctrl+a`\</code></pre><p>效果：</p><blockquote><p><code>ctrl+a</code></p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a><strong>5. 谁在用？</strong></h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a><strong>6. 尝试一下</strong></h4><ul><li><strong>Chrome</strong>下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错</li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。</li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><p>–<br><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><p>–</p><p>以上基本是所有traditonal markdown的语法。</p><p><strong>其它：</strong></p><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 &lt;a href=&quot;https://github.com/younghz/Markdown&quot; title=&quot;younghz/Markdown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;younghz/Markdown&lt;/a&gt; Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="md" scheme="https://github3982.github.io/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本语法在 Ocean 中的展现形式</title>
    <link href="https://github3982.github.io/2019/08/15/md%20-%20%E5%89%AF%E6%9C%AC%20(4)/"/>
    <id>https://github3982.github.io/2019/08/15/md - 副本 (4)/</id>
    <published>2019-08-15T05:25:43.000Z</published>
    <updated>2019-09-04T03:28:55.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 <a href="https://github.com/younghz/Markdown" title="younghz/Markdown" target="_blank" rel="noopener">younghz/Markdown</a> Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！</p><a id="more"></a><hr><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><blockquote><p>Markdown是什么？</p><p>谁创造了它？</p><p>为什么要使用它？</p><p>怎么使用？</p><p>谁在用？</p><p>尝试一下</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>1. Markdown是什么？</strong><br><strong>Markdown</strong>是一种轻量级标记语言，它以纯文本形式<em>(易读、易写、易更改)</em>编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p><p><strong>2. 谁创造了它？</strong><br>它由<a href="http://www.aaronsw.com/" title="Aaron Swartz" target="_blank" rel="noopener">Aaron Swartz</a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（2013年1月11日）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" title="介绍" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：</p><ul><li>14岁参与RSS 1.0规格标准的制订。</li><li>2004年入读斯坦福，之后退学。</li></ul><ul><li>2005年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<br><a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。</li><li>2010年创立求进会（Demand Progress），积极参与禁止网络盗- 版法案（SOPA）活动，最终该提案被撤回。</li><li>2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并- - 以免费形式上传于网络被捕。</li><li>2013年1月自杀身亡。</li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt></p><p>天才都有早逝的归途。</p><p><strong>3. 为什么要使用它？</strong></p><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><p><strong>4. 怎么使用？</strong></p><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。<br>Markdown语法主要分为如下几大部分：<br><strong>标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a><strong>4.1 标题</strong></h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>2）使用#，可表示1-6级标题。</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>效果：</p><blockquote><h1 id="一级标题-2"><a href="#一级标题-2" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-2"><a href="#二级标题-2" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题-1"><a href="#四级标题-1" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题-1"><a href="#五级标题-1" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题-1"><a href="#六级标题-1" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a><strong>4.2 段落</strong></h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a><strong>4.3 区块引用</strong></h4><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p><blockquote><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote></blockquote><p>效果：</p><blockquote><p>区块引用</p></blockquote><blockquote><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a><strong>4.4 代码区块</strong></h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p><p>代码区块：</p><pre><code>void main(){    printf(“Hello, Markdown.”);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a><strong>4.5 强调</strong></h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><p>效果：</p><blockquote><ul><li>斜体 *，_ 斜体 _</li></ul></blockquote><blockquote><p>** 粗体 **，__ 粗体 __</p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a><strong>4.6 列表</strong></h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项</p><ul><li>（+*）第三项</li></ul></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项<br>-（+*） 第三项</p></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a><strong>4.7 分割线</strong></h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a><strong>4.8 链接</strong></h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br>行内式：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https://zhwangart.github.io/2018/11/29/Markdown/://github.com/younghz/Markdown" title="younghz的Markdown库。" target="_blank" rel="noopener">younghz的Markdown库</a></p></blockquote><h4 id="参考式："><a href="#参考式：" class="headerlink" title="参考式："></a><strong>参考式：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”</p></blockquote><h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a><strong>效果：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”<br>[2]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”</p></blockquote><p><strong>注意：</strong>上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a><strong>4.9 图片</strong></h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a><strong>4.10 反斜杠\</strong></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a><strong>4.11 符号’`’</strong></h4><p>起到标记作用。如：</p><pre><code>\`ctrl+a`\</code></pre><p>效果：</p><blockquote><p><code>ctrl+a</code></p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a><strong>5. 谁在用？</strong></h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a><strong>6. 尝试一下</strong></h4><ul><li><strong>Chrome</strong>下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错</li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。</li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><p>–<br><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><p>–</p><p>以上基本是所有traditonal markdown的语法。</p><p><strong>其它：</strong></p><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 &lt;a href=&quot;https://github.com/younghz/Markdown&quot; title=&quot;younghz/Markdown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;younghz/Markdown&lt;/a&gt; Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="md" scheme="https://github3982.github.io/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本语法在 Ocean 中的展现形式</title>
    <link href="https://github3982.github.io/2019/08/15/md%20-%20%E5%89%AF%E6%9C%AC%20(5)/"/>
    <id>https://github3982.github.io/2019/08/15/md - 副本 (5)/</id>
    <published>2019-08-15T05:25:43.000Z</published>
    <updated>2019-09-04T03:28:55.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 <a href="https://github.com/younghz/Markdown" title="younghz/Markdown" target="_blank" rel="noopener">younghz/Markdown</a> Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！</p><a id="more"></a><hr><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><blockquote><p>Markdown是什么？</p><p>谁创造了它？</p><p>为什么要使用它？</p><p>怎么使用？</p><p>谁在用？</p><p>尝试一下</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>1. Markdown是什么？</strong><br><strong>Markdown</strong>是一种轻量级标记语言，它以纯文本形式<em>(易读、易写、易更改)</em>编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p><p><strong>2. 谁创造了它？</strong><br>它由<a href="http://www.aaronsw.com/" title="Aaron Swartz" target="_blank" rel="noopener">Aaron Swartz</a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（2013年1月11日）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" title="介绍" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：</p><ul><li>14岁参与RSS 1.0规格标准的制订。</li><li>2004年入读斯坦福，之后退学。</li></ul><ul><li>2005年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<br><a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。</li><li>2010年创立求进会（Demand Progress），积极参与禁止网络盗- 版法案（SOPA）活动，最终该提案被撤回。</li><li>2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并- - 以免费形式上传于网络被捕。</li><li>2013年1月自杀身亡。</li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt></p><p>天才都有早逝的归途。</p><p><strong>3. 为什么要使用它？</strong></p><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><p><strong>4. 怎么使用？</strong></p><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。<br>Markdown语法主要分为如下几大部分：<br><strong>标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a><strong>4.1 标题</strong></h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>2）使用#，可表示1-6级标题。</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>效果：</p><blockquote><h1 id="一级标题-2"><a href="#一级标题-2" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-2"><a href="#二级标题-2" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题-1"><a href="#四级标题-1" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题-1"><a href="#五级标题-1" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题-1"><a href="#六级标题-1" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a><strong>4.2 段落</strong></h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a><strong>4.3 区块引用</strong></h4><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p><blockquote><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote></blockquote><p>效果：</p><blockquote><p>区块引用</p></blockquote><blockquote><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a><strong>4.4 代码区块</strong></h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p><p>代码区块：</p><pre><code>void main(){    printf(“Hello, Markdown.”);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a><strong>4.5 强调</strong></h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><p>效果：</p><blockquote><ul><li>斜体 *，_ 斜体 _</li></ul></blockquote><blockquote><p>** 粗体 **，__ 粗体 __</p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a><strong>4.6 列表</strong></h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项</p><ul><li>（+*）第三项</li></ul></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项<br>-（+*） 第三项</p></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a><strong>4.7 分割线</strong></h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a><strong>4.8 链接</strong></h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br>行内式：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https://zhwangart.github.io/2018/11/29/Markdown/://github.com/younghz/Markdown" title="younghz的Markdown库。" target="_blank" rel="noopener">younghz的Markdown库</a></p></blockquote><h4 id="参考式："><a href="#参考式：" class="headerlink" title="参考式："></a><strong>参考式：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”</p></blockquote><h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a><strong>效果：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”<br>[2]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”</p></blockquote><p><strong>注意：</strong>上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a><strong>4.9 图片</strong></h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a><strong>4.10 反斜杠\</strong></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a><strong>4.11 符号’`’</strong></h4><p>起到标记作用。如：</p><pre><code>\`ctrl+a`\</code></pre><p>效果：</p><blockquote><p><code>ctrl+a</code></p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a><strong>5. 谁在用？</strong></h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a><strong>6. 尝试一下</strong></h4><ul><li><strong>Chrome</strong>下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错</li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。</li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><p>–<br><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><p>–</p><p>以上基本是所有traditonal markdown的语法。</p><p><strong>其它：</strong></p><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 &lt;a href=&quot;https://github.com/younghz/Markdown&quot; title=&quot;younghz/Markdown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;younghz/Markdown&lt;/a&gt; Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="md" scheme="https://github3982.github.io/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本语法在 Ocean 中的展现形式</title>
    <link href="https://github3982.github.io/2019/08/15/md%20-%20%E5%89%AF%E6%9C%AC%20(6)/"/>
    <id>https://github3982.github.io/2019/08/15/md - 副本 (6)/</id>
    <published>2019-08-15T05:25:43.000Z</published>
    <updated>2019-09-04T03:28:55.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 <a href="https://github.com/younghz/Markdown" title="younghz/Markdown" target="_blank" rel="noopener">younghz/Markdown</a> Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！</p><a id="more"></a><hr><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><blockquote><p>Markdown是什么？</p><p>谁创造了它？</p><p>为什么要使用它？</p><p>怎么使用？</p><p>谁在用？</p><p>尝试一下</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>1. Markdown是什么？</strong><br><strong>Markdown</strong>是一种轻量级标记语言，它以纯文本形式<em>(易读、易写、易更改)</em>编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p><p><strong>2. 谁创造了它？</strong><br>它由<a href="http://www.aaronsw.com/" title="Aaron Swartz" target="_blank" rel="noopener">Aaron Swartz</a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（2013年1月11日）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" title="介绍" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：</p><ul><li>14岁参与RSS 1.0规格标准的制订。</li><li>2004年入读斯坦福，之后退学。</li></ul><ul><li>2005年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<br><a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。</li><li>2010年创立求进会（Demand Progress），积极参与禁止网络盗- 版法案（SOPA）活动，最终该提案被撤回。</li><li>2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并- - 以免费形式上传于网络被捕。</li><li>2013年1月自杀身亡。</li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt></p><p>天才都有早逝的归途。</p><p><strong>3. 为什么要使用它？</strong></p><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><p><strong>4. 怎么使用？</strong></p><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。<br>Markdown语法主要分为如下几大部分：<br><strong>标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a><strong>4.1 标题</strong></h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>2）使用#，可表示1-6级标题。</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>效果：</p><blockquote><h1 id="一级标题-2"><a href="#一级标题-2" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-2"><a href="#二级标题-2" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题-1"><a href="#四级标题-1" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题-1"><a href="#五级标题-1" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题-1"><a href="#六级标题-1" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a><strong>4.2 段落</strong></h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a><strong>4.3 区块引用</strong></h4><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p><blockquote><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote></blockquote><p>效果：</p><blockquote><p>区块引用</p></blockquote><blockquote><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a><strong>4.4 代码区块</strong></h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p><p>代码区块：</p><pre><code>void main(){    printf(“Hello, Markdown.”);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a><strong>4.5 强调</strong></h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><p>效果：</p><blockquote><ul><li>斜体 *，_ 斜体 _</li></ul></blockquote><blockquote><p>** 粗体 **，__ 粗体 __</p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a><strong>4.6 列表</strong></h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项</p><ul><li>（+*）第三项</li></ul></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项<br>-（+*） 第三项</p></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a><strong>4.7 分割线</strong></h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a><strong>4.8 链接</strong></h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br>行内式：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https://zhwangart.github.io/2018/11/29/Markdown/://github.com/younghz/Markdown" title="younghz的Markdown库。" target="_blank" rel="noopener">younghz的Markdown库</a></p></blockquote><h4 id="参考式："><a href="#参考式：" class="headerlink" title="参考式："></a><strong>参考式：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”</p></blockquote><h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a><strong>效果：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”<br>[2]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”</p></blockquote><p><strong>注意：</strong>上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a><strong>4.9 图片</strong></h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a><strong>4.10 反斜杠\</strong></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a><strong>4.11 符号’`’</strong></h4><p>起到标记作用。如：</p><pre><code>\`ctrl+a`\</code></pre><p>效果：</p><blockquote><p><code>ctrl+a</code></p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a><strong>5. 谁在用？</strong></h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a><strong>6. 尝试一下</strong></h4><ul><li><strong>Chrome</strong>下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错</li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。</li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><p>–<br><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><p>–</p><p>以上基本是所有traditonal markdown的语法。</p><p><strong>其它：</strong></p><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 &lt;a href=&quot;https://github.com/younghz/Markdown&quot; title=&quot;younghz/Markdown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;younghz/Markdown&lt;/a&gt; Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="md" scheme="https://github3982.github.io/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本语法在 Ocean 中的展现形式</title>
    <link href="https://github3982.github.io/2019/08/15/md%20-%20%E5%89%AF%E6%9C%AC%20(7)/"/>
    <id>https://github3982.github.io/2019/08/15/md - 副本 (7)/</id>
    <published>2019-08-15T05:25:43.000Z</published>
    <updated>2019-09-04T03:28:55.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 <a href="https://github.com/younghz/Markdown" title="younghz/Markdown" target="_blank" rel="noopener">younghz/Markdown</a> Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！</p><a id="more"></a><hr><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><blockquote><p>Markdown是什么？</p><p>谁创造了它？</p><p>为什么要使用它？</p><p>怎么使用？</p><p>谁在用？</p><p>尝试一下</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>1. Markdown是什么？</strong><br><strong>Markdown</strong>是一种轻量级标记语言，它以纯文本形式<em>(易读、易写、易更改)</em>编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p><p><strong>2. 谁创造了它？</strong><br>它由<a href="http://www.aaronsw.com/" title="Aaron Swartz" target="_blank" rel="noopener">Aaron Swartz</a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（2013年1月11日）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" title="介绍" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：</p><ul><li>14岁参与RSS 1.0规格标准的制订。</li><li>2004年入读斯坦福，之后退学。</li></ul><ul><li>2005年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<br><a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。</li><li>2010年创立求进会（Demand Progress），积极参与禁止网络盗- 版法案（SOPA）活动，最终该提案被撤回。</li><li>2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并- - 以免费形式上传于网络被捕。</li><li>2013年1月自杀身亡。</li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt></p><p>天才都有早逝的归途。</p><p><strong>3. 为什么要使用它？</strong></p><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><p><strong>4. 怎么使用？</strong></p><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。<br>Markdown语法主要分为如下几大部分：<br><strong>标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a><strong>4.1 标题</strong></h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>2）使用#，可表示1-6级标题。</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>效果：</p><blockquote><h1 id="一级标题-2"><a href="#一级标题-2" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-2"><a href="#二级标题-2" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题-1"><a href="#四级标题-1" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题-1"><a href="#五级标题-1" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题-1"><a href="#六级标题-1" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a><strong>4.2 段落</strong></h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a><strong>4.3 区块引用</strong></h4><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p><blockquote><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote></blockquote><p>效果：</p><blockquote><p>区块引用</p></blockquote><blockquote><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a><strong>4.4 代码区块</strong></h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p><p>代码区块：</p><pre><code>void main(){    printf(“Hello, Markdown.”);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a><strong>4.5 强调</strong></h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><p>效果：</p><blockquote><ul><li>斜体 *，_ 斜体 _</li></ul></blockquote><blockquote><p>** 粗体 **，__ 粗体 __</p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a><strong>4.6 列表</strong></h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项</p><ul><li>（+*）第三项</li></ul></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项<br>-（+*） 第三项</p></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a><strong>4.7 分割线</strong></h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a><strong>4.8 链接</strong></h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br>行内式：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https://zhwangart.github.io/2018/11/29/Markdown/://github.com/younghz/Markdown" title="younghz的Markdown库。" target="_blank" rel="noopener">younghz的Markdown库</a></p></blockquote><h4 id="参考式："><a href="#参考式：" class="headerlink" title="参考式："></a><strong>参考式：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”</p></blockquote><h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a><strong>效果：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”<br>[2]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”</p></blockquote><p><strong>注意：</strong>上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a><strong>4.9 图片</strong></h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a><strong>4.10 反斜杠\</strong></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a><strong>4.11 符号’`’</strong></h4><p>起到标记作用。如：</p><pre><code>\`ctrl+a`\</code></pre><p>效果：</p><blockquote><p><code>ctrl+a</code></p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a><strong>5. 谁在用？</strong></h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a><strong>6. 尝试一下</strong></h4><ul><li><strong>Chrome</strong>下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错</li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。</li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><p>–<br><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><p>–</p><p>以上基本是所有traditonal markdown的语法。</p><p><strong>其它：</strong></p><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 &lt;a href=&quot;https://github.com/younghz/Markdown&quot; title=&quot;younghz/Markdown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;younghz/Markdown&lt;/a&gt; Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="md" scheme="https://github3982.github.io/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本语法在 Ocean 中的展现形式</title>
    <link href="https://github3982.github.io/2019/08/15/md%20-%20%E5%89%AF%E6%9C%AC%20(8)/"/>
    <id>https://github3982.github.io/2019/08/15/md - 副本 (8)/</id>
    <published>2019-08-15T05:25:43.000Z</published>
    <updated>2019-09-04T03:28:55.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 <a href="https://github.com/younghz/Markdown" title="younghz/Markdown" target="_blank" rel="noopener">younghz/Markdown</a> Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！</p><a id="more"></a><hr><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><blockquote><p>Markdown是什么？</p><p>谁创造了它？</p><p>为什么要使用它？</p><p>怎么使用？</p><p>谁在用？</p><p>尝试一下</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>1. Markdown是什么？</strong><br><strong>Markdown</strong>是一种轻量级标记语言，它以纯文本形式<em>(易读、易写、易更改)</em>编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p><p><strong>2. 谁创造了它？</strong><br>它由<a href="http://www.aaronsw.com/" title="Aaron Swartz" target="_blank" rel="noopener">Aaron Swartz</a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（2013年1月11日）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" title="介绍" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：</p><ul><li>14岁参与RSS 1.0规格标准的制订。</li><li>2004年入读斯坦福，之后退学。</li></ul><ul><li>2005年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<br><a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。</li><li>2010年创立求进会（Demand Progress），积极参与禁止网络盗- 版法案（SOPA）活动，最终该提案被撤回。</li><li>2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并- - 以免费形式上传于网络被捕。</li><li>2013年1月自杀身亡。</li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt></p><p>天才都有早逝的归途。</p><p><strong>3. 为什么要使用它？</strong></p><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><p><strong>4. 怎么使用？</strong></p><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。<br>Markdown语法主要分为如下几大部分：<br><strong>标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a><strong>4.1 标题</strong></h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>2）使用#，可表示1-6级标题。</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>效果：</p><blockquote><h1 id="一级标题-2"><a href="#一级标题-2" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-2"><a href="#二级标题-2" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题-1"><a href="#四级标题-1" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题-1"><a href="#五级标题-1" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题-1"><a href="#六级标题-1" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a><strong>4.2 段落</strong></h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a><strong>4.3 区块引用</strong></h4><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p><blockquote><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote></blockquote><p>效果：</p><blockquote><p>区块引用</p></blockquote><blockquote><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a><strong>4.4 代码区块</strong></h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p><p>代码区块：</p><pre><code>void main(){    printf(“Hello, Markdown.”);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a><strong>4.5 强调</strong></h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><p>效果：</p><blockquote><ul><li>斜体 *，_ 斜体 _</li></ul></blockquote><blockquote><p>** 粗体 **，__ 粗体 __</p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a><strong>4.6 列表</strong></h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项</p><ul><li>（+*）第三项</li></ul></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项<br>-（+*） 第三项</p></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a><strong>4.7 分割线</strong></h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a><strong>4.8 链接</strong></h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br>行内式：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https://zhwangart.github.io/2018/11/29/Markdown/://github.com/younghz/Markdown" title="younghz的Markdown库。" target="_blank" rel="noopener">younghz的Markdown库</a></p></blockquote><h4 id="参考式："><a href="#参考式：" class="headerlink" title="参考式："></a><strong>参考式：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”</p></blockquote><h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a><strong>效果：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”<br>[2]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”</p></blockquote><p><strong>注意：</strong>上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a><strong>4.9 图片</strong></h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a><strong>4.10 反斜杠\</strong></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a><strong>4.11 符号’`’</strong></h4><p>起到标记作用。如：</p><pre><code>\`ctrl+a`\</code></pre><p>效果：</p><blockquote><p><code>ctrl+a</code></p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a><strong>5. 谁在用？</strong></h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a><strong>6. 尝试一下</strong></h4><ul><li><strong>Chrome</strong>下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错</li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。</li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><p>–<br><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><p>–</p><p>以上基本是所有traditonal markdown的语法。</p><p><strong>其它：</strong></p><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 &lt;a href=&quot;https://github.com/younghz/Markdown&quot; title=&quot;younghz/Markdown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;younghz/Markdown&lt;/a&gt; Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="md" scheme="https://github3982.github.io/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本语法在 Ocean 中的展现形式</title>
    <link href="https://github3982.github.io/2019/08/15/md/"/>
    <id>https://github3982.github.io/2019/08/15/md/</id>
    <published>2019-08-15T05:25:43.000Z</published>
    <updated>2019-09-04T03:28:55.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 <a href="https://github.com/younghz/Markdown" title="younghz/Markdown" target="_blank" rel="noopener">younghz/Markdown</a> Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！</p><a id="more"></a><hr><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><blockquote><p>Markdown是什么？</p><p>谁创造了它？</p><p>为什么要使用它？</p><p>怎么使用？</p><p>谁在用？</p><p>尝试一下</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>1. Markdown是什么？</strong><br><strong>Markdown</strong>是一种轻量级标记语言，它以纯文本形式<em>(易读、易写、易更改)</em>编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p><p><strong>2. 谁创造了它？</strong><br>它由<a href="http://www.aaronsw.com/" title="Aaron Swartz" target="_blank" rel="noopener">Aaron Swartz</a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（2013年1月11日）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" title="介绍" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：</p><ul><li>14岁参与RSS 1.0规格标准的制订。</li><li>2004年入读斯坦福，之后退学。</li></ul><ul><li>2005年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<br><a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。</li><li>2010年创立求进会（Demand Progress），积极参与禁止网络盗- 版法案（SOPA）活动，最终该提案被撤回。</li><li>2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并- - 以免费形式上传于网络被捕。</li><li>2013年1月自杀身亡。</li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt></p><p>天才都有早逝的归途。</p><p><strong>3. 为什么要使用它？</strong></p><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><p><strong>4. 怎么使用？</strong></p><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。<br>Markdown语法主要分为如下几大部分：<br><strong>标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a><strong>4.1 标题</strong></h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>2）使用#，可表示1-6级标题。</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>效果：</p><blockquote><h1 id="一级标题-2"><a href="#一级标题-2" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题-2"><a href="#二级标题-2" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题-1"><a href="#四级标题-1" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题-1"><a href="#五级标题-1" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题-1"><a href="#六级标题-1" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a><strong>4.2 段落</strong></h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a><strong>4.3 区块引用</strong></h4><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p><blockquote><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote></blockquote><p>效果：</p><blockquote><p>区块引用</p></blockquote><blockquote><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a><strong>4.4 代码区块</strong></h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p><p>代码区块：</p><pre><code>void main(){    printf(“Hello, Markdown.”);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a><strong>4.5 强调</strong></h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><p>效果：</p><blockquote><ul><li>斜体 *，_ 斜体 _</li></ul></blockquote><blockquote><p>** 粗体 **，__ 粗体 __</p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a><strong>4.6 列表</strong></h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项</p><ul><li>（+*）第三项</li></ul></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><p>-（+<em>） 第一项<br>-（+</em>） 第二项<br>-（+*） 第三项</p></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a><strong>4.7 分割线</strong></h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a><strong>4.8 链接</strong></h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br>行内式：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https://zhwangart.github.io/2018/11/29/Markdown/://github.com/younghz/Markdown" title="younghz的Markdown库。" target="_blank" rel="noopener">younghz的Markdown库</a></p></blockquote><h4 id="参考式："><a href="#参考式：" class="headerlink" title="参考式："></a><strong>参考式：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”</p></blockquote><h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a><strong>效果：</strong></h4><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”<br>[2]:<a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a> “Markdown”</p></blockquote><p><strong>注意：</strong>上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a><strong>4.9 图片</strong></h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a><strong>4.10 反斜杠\</strong></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a><strong>4.11 符号’`’</strong></h4><p>起到标记作用。如：</p><pre><code>\`ctrl+a`\</code></pre><p>效果：</p><blockquote><p><code>ctrl+a</code></p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a><strong>5. 谁在用？</strong></h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a><strong>6. 尝试一下</strong></h4><ul><li><strong>Chrome</strong>下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错</li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。</li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><p>–<br><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><p>–</p><p>以上基本是所有traditonal markdown的语法。</p><p><strong>其它：</strong></p><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 &lt;a href=&quot;https://github.com/younghz/Markdown&quot; title=&quot;younghz/Markdown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;younghz/Markdown&lt;/a&gt; Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="md" scheme="https://github3982.github.io/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Fira Code | 为写程序而生的字体</title>
    <link href="https://github3982.github.io/2019/08/12/FiraCode%E4%B8%BA%E5%86%99%E7%A8%8B%E5%BA%8F%E8%80%8C%E7%94%9F%E7%9A%84%E5%AD%97%E4%BD%93/"/>
    <id>https://github3982.github.io/2019/08/12/FiraCode为写程序而生的字体/</id>
    <published>2019-08-12T12:56:43.000Z</published>
    <updated>2019-09-21T09:30:00.915Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>程序员福利！！！今天为大家带来一个专为程序员写程序设计的字体 —— Fira Code Fira 是 Mozilla 公司（火狐浏览器她爹）主推的字体系列。Fira Code 是其中的一员，专为写程序而生。出来具有等宽等基本属性外，还加入了编程连字特性（ligatures）。</p><a id="more"></a><hr><p><img src="https://camo.githubusercontent.com/3a8948f34284f378ead7af5846aa432035c687ad/687474703a2f2f732e746f6e736b792e6d652f696d67732f666972615f636f64655f6c6f676f2e737667" alt><br><strong>程序员福利！！！</strong> 今天为大家带来一个专为程序员写程序设计的字体 —— Fira Code Fira 是 Mozilla 公司（火狐浏览器她爹）主推的字体系列。Fira Code 是其中的一员，专为写程序而生。出来具有等宽等基本属性外，还加入了编程连字特性（ligatures）。<br><br><br><code>Fira Code</code> 就是利用这个特性对编程中的常用符号进行优化，比如把输入的「!=」直接显示成「≠」或者把「&gt;=」变成「≥ 」等等，以此来提高代码的可读性。<br><img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/all_ligatures.png" alt></p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="#代码示例"></a>#代码示例</h1><p>Ruby:<br><img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/ruby.png" alt><br>JavaScript:<br><img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/javascript.png" alt><br>Erlang:<br><img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/erlang.png" alt><br>Elixir:<br><img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/elixir.png" alt><br>Go:<br><img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/go.png" alt><br>LiveScript:<br><img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/livescript.png" alt><br>Clojure:<br><img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/clojure.png" alt><br>Swift:<br><img src="https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/swift.png" alt></p><h1 id="正文"><a href="#正文" class="headerlink" title="#正文"></a>#正文</h1><blockquote><p>安装 Fira Code</p></blockquote><p>使用 .ttf 文件安装<br>访问此网站 <a href="https://github.com/tonsky/FiraCode" target="_blank" rel="noopener">https://github.com/tonsky/FiraCode</a> 找到 Download 这个链接，单击它。<br><img src="https://mogeko.github.io/blog-images/r/006/install_fira-code_1.png" alt><br>单击这个地址可以下载 v1.204 版的 Fira Code -&gt; <a href="https://github.com/tonsky/FiraCode/releases/download/1.204/FiraCode_1.204.zip" title="Download v1.204" target="_blank" rel="noopener">Download v1.204</a></p><p>下载好后，解压它。 打开解压后得到的文件夹。 打开 /ttf文件夹。 会看到以下文件<br><img src="https://mogeko.github.io/blog-images/r/006/install_fira-code_2.png" alt><br>Ctrl+A 全选 -&gt; 右键 -&gt; 安装。</p><p><strong>使用 Chocolate 安装</strong><br>关于 Chocolate，请参考<a href="https://mogeko.me/2017/006/#%E4%BD%BF%E7%94%A8-Chocolatey-%E5%AE%89%E8%A3%85" title="这篇文章" target="_blank" rel="noopener">这篇文章</a>。 使用以下命令安装<br>    $ choco install firacode</p><blockquote><p><strong>如何使用</strong></p></blockquote><p>只有以下编辑器、浏览器可以完美支持 Fira Code：</p><p><a href="https://mogeko.me/2017/006/#%E6%94%AF%E6%8C%81%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8" title="支持的编辑器" target="_blank" rel="noopener">支持的编辑器</a></p><p><a href="https://mogeko.me/2017/006/#%E6%94%AF%E6%8C%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8" title="支持的浏览器" target="_blank" rel="noopener">https://mogeko.me/2017/006/#%E6%94%AF%E6%8C%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8</a></p><p><strong>VS Code</strong></p><p>介绍一下在 VS Code 中如何配置（因为VS Code 是我主要使用的编辑器，别的不是很熟悉） 打开 VS Code。 文件 -&gt; 首选项 -&gt; 设置<br><img src="https://mogeko.github.io/blog-images/r/006/use_fira-code_1.png" alt><br>然后在右边的窗口中添加</p><pre><code>&quot;editor.fontFamily&quot;: &quot;Fira Code&quot;,&quot;editor.fontLigatures&quot;: true</code></pre><p><img src="https://mogeko.github.io/blog-images/r/006/use_fira-code_2.png" alt><br>Ctrl+S 保存。如果没有生效就使用以下代码</p><pre><code>&quot;editor.fontFamily&quot;: &quot;&apos;Fira Code&apos;&quot;,&quot;editor.fontLigatures&quot;: true</code></pre><p>Ctrl+S 保存。</p><p>别的编辑器可以参考 -&gt; <a href="https://github.com/tonsky/FiraCode/wiki#how-to-enable-ligatures" target="_blank" rel="noopener">https://github.com/tonsky/FiraCode/wiki#how-to-enable-ligatures</a></p><p><strong>Chrome</strong></p><p>可以将 Fira Code 设为 Chrome 的 等宽字体。</p><p>打开 Chrome。点击右上角的 ┇ -&gt; 设置<br><img src="https://mogeko.github.io/blog-images/r/006/use_fira-code_3.png" alt></p><p>选择 自定义字体</p><p><img src="https://mogeko.github.io/blog-images/r/006/use_fira-code_4.png" alt></p><p>宽度固定的字体 -&gt; 在下拉菜单中选择 Fira Code<br><img src="https://mogeko.github.io/blog-images/r/006/use_fira-code_5.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序员福利！！！今天为大家带来一个专为程序员写程序设计的字体 —— Fira Code Fira 是 Mozilla 公司（火狐浏览器她爹）主推的字体系列。Fira Code 是其中的一员，专为写程序而生。出来具有等宽等基本属性外，还加入了编程连字特性（ligatures）。&lt;/p&gt;
    
    </summary>
    
      <category term="ifs" scheme="https://github3982.github.io/categories/ifs/"/>
    
    
      <category term="Node" scheme="https://github3982.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node安装与使用</title>
    <link href="https://github3982.github.io/2019/08/10/node/"/>
    <id>https://github3982.github.io/2019/08/10/node/</id>
    <published>2019-08-10T08:21:54.000Z</published>
    <updated>2019-09-21T09:30:05.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。</p><a id="more"></a><h1 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a>下载Node<br>软件， 安装到指定位置，如<strong>D:\Program\nodejs</strong>，安装完成后环境变量<strong>PATH</strong> 内会有刚刚安装Node的安装目录<strong>D:\Program\nodejs</strong>。</p><h1 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h1><pre><code>node -v</code></pre><h1 id="npm配置修改"><a href="#npm配置修改" class="headerlink" title="npm配置修改"></a>npm配置修改</h1><h2 id="查看全局包位置"><a href="#查看全局包位置" class="headerlink" title="查看全局包位置"></a>查看全局包位置</h2><pre><code>npm root -g</code></pre><h2 id="查看prefix和cache路径配置信息"><a href="#查看prefix和cache路径配置信息" class="headerlink" title="查看prefix和cache路径配置信息"></a>查看prefix和cache路径配置信息</h2><pre><code>npm config get cachenpm config get prefix</code></pre><h2 id="查看npm配置信息"><a href="#查看npm配置信息" class="headerlink" title="查看npm配置信息"></a>查看npm配置信息</h2><pre><code>npm config list</code></pre><h2 id="修改全局包默认安装位置"><a href="#修改全局包默认安装位置" class="headerlink" title="修改全局包默认安装位置"></a>修改全局包默认安装位置</h2><p>D:\Program\nodejs目录下新建目录node_global， 执行以下命令：</p><pre><code>npm config set prefix &quot;D:\Program\nodejs\node_global&quot;</code></pre><blockquote><p>注意： 将<strong>D:\Program\nodejs\node_global</strong> 和 <strong>D:\Program\nodejs\node_modules</strong>目录添加入环境变量PATH内。</p></blockquote><h2 id="修改cache默认安装位置"><a href="#修改cache默认安装位置" class="headerlink" title="修改cache默认安装位置"></a>修改cache默认安装位置</h2><p><strong>D:\Program\nodejs</strong>目录下新建目录<strong>node_cache</strong>， 执行以下命令：</p><pre><code>npm config set cache  &quot;D:\Program\nodejs\node_cache&quot;</code></pre><h1 id="设置npm镜像源"><a href="#设置npm镜像源" class="headerlink" title="设置npm镜像源"></a>设置npm镜像源</h1><pre><code>npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。&lt;/p&gt;
    
    </summary>
    
      <category term="sdd" scheme="https://github3982.github.io/categories/sdd/"/>
    
    
      <category term="Node" scheme="https://github3982.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node安装与使用</title>
    <link href="https://github3982.github.io/2019/08/10/node%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>https://github3982.github.io/2019/08/10/node - 副本/</id>
    <published>2019-08-10T08:21:54.000Z</published>
    <updated>2019-09-21T09:30:05.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。</p><a id="more"></a><h1 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a>下载Node<br>软件， 安装到指定位置，如<strong>D:\Program\nodejs</strong>，安装完成后环境变量<strong>PATH</strong> 内会有刚刚安装Node的安装目录<strong>D:\Program\nodejs</strong>。</p><h1 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h1><pre><code>node -v</code></pre><h1 id="npm配置修改"><a href="#npm配置修改" class="headerlink" title="npm配置修改"></a>npm配置修改</h1><h2 id="查看全局包位置"><a href="#查看全局包位置" class="headerlink" title="查看全局包位置"></a>查看全局包位置</h2><pre><code>npm root -g</code></pre><h2 id="查看prefix和cache路径配置信息"><a href="#查看prefix和cache路径配置信息" class="headerlink" title="查看prefix和cache路径配置信息"></a>查看prefix和cache路径配置信息</h2><pre><code>npm config get cachenpm config get prefix</code></pre><h2 id="查看npm配置信息"><a href="#查看npm配置信息" class="headerlink" title="查看npm配置信息"></a>查看npm配置信息</h2><pre><code>npm config list</code></pre><h2 id="修改全局包默认安装位置"><a href="#修改全局包默认安装位置" class="headerlink" title="修改全局包默认安装位置"></a>修改全局包默认安装位置</h2><p>D:\Program\nodejs目录下新建目录node_global， 执行以下命令：</p><pre><code>npm config set prefix &quot;D:\Program\nodejs\node_global&quot;</code></pre><blockquote><p>注意： 将<strong>D:\Program\nodejs\node_global</strong> 和 <strong>D:\Program\nodejs\node_modules</strong>目录添加入环境变量PATH内。</p></blockquote><h2 id="修改cache默认安装位置"><a href="#修改cache默认安装位置" class="headerlink" title="修改cache默认安装位置"></a>修改cache默认安装位置</h2><p><strong>D:\Program\nodejs</strong>目录下新建目录<strong>node_cache</strong>， 执行以下命令：</p><pre><code>npm config set cache  &quot;D:\Program\nodejs\node_cache&quot;</code></pre><h1 id="设置npm镜像源"><a href="#设置npm镜像源" class="headerlink" title="设置npm镜像源"></a>设置npm镜像源</h1><pre><code>npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。&lt;/p&gt;
    
    </summary>
    
      <category term="sdd" scheme="https://github3982.github.io/categories/sdd/"/>
    
    
      <category term="Node" scheme="https://github3982.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node安装与使用</title>
    <link href="https://github3982.github.io/2019/08/10/node%20-%20%E5%89%AF%E6%9C%AC%20(9)/"/>
    <id>https://github3982.github.io/2019/08/10/node - 副本 (9)/</id>
    <published>2019-08-10T08:21:54.000Z</published>
    <updated>2019-09-21T09:30:05.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。</p><a id="more"></a><h1 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a>下载Node<br>软件， 安装到指定位置，如<strong>D:\Program\nodejs</strong>，安装完成后环境变量<strong>PATH</strong> 内会有刚刚安装Node的安装目录<strong>D:\Program\nodejs</strong>。</p><h1 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h1><pre><code>node -v</code></pre><h1 id="npm配置修改"><a href="#npm配置修改" class="headerlink" title="npm配置修改"></a>npm配置修改</h1><h2 id="查看全局包位置"><a href="#查看全局包位置" class="headerlink" title="查看全局包位置"></a>查看全局包位置</h2><pre><code>npm root -g</code></pre><h2 id="查看prefix和cache路径配置信息"><a href="#查看prefix和cache路径配置信息" class="headerlink" title="查看prefix和cache路径配置信息"></a>查看prefix和cache路径配置信息</h2><pre><code>npm config get cachenpm config get prefix</code></pre><h2 id="查看npm配置信息"><a href="#查看npm配置信息" class="headerlink" title="查看npm配置信息"></a>查看npm配置信息</h2><pre><code>npm config list</code></pre><h2 id="修改全局包默认安装位置"><a href="#修改全局包默认安装位置" class="headerlink" title="修改全局包默认安装位置"></a>修改全局包默认安装位置</h2><p>D:\Program\nodejs目录下新建目录node_global， 执行以下命令：</p><pre><code>npm config set prefix &quot;D:\Program\nodejs\node_global&quot;</code></pre><blockquote><p>注意： 将<strong>D:\Program\nodejs\node_global</strong> 和 <strong>D:\Program\nodejs\node_modules</strong>目录添加入环境变量PATH内。</p></blockquote><h2 id="修改cache默认安装位置"><a href="#修改cache默认安装位置" class="headerlink" title="修改cache默认安装位置"></a>修改cache默认安装位置</h2><p><strong>D:\Program\nodejs</strong>目录下新建目录<strong>node_cache</strong>， 执行以下命令：</p><pre><code>npm config set cache  &quot;D:\Program\nodejs\node_cache&quot;</code></pre><h1 id="设置npm镜像源"><a href="#设置npm镜像源" class="headerlink" title="设置npm镜像源"></a>设置npm镜像源</h1><pre><code>npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。&lt;/p&gt;
    
    </summary>
    
      <category term="sdd" scheme="https://github3982.github.io/categories/sdd/"/>
    
    
      <category term="Node" scheme="https://github3982.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node安装与使用</title>
    <link href="https://github3982.github.io/2019/08/10/node%20-%20%E5%89%AF%E6%9C%AC%20(8)/"/>
    <id>https://github3982.github.io/2019/08/10/node - 副本 (8)/</id>
    <published>2019-08-10T08:21:54.000Z</published>
    <updated>2019-09-21T09:30:05.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。</p><a id="more"></a><h1 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a>下载Node<br>软件， 安装到指定位置，如<strong>D:\Program\nodejs</strong>，安装完成后环境变量<strong>PATH</strong> 内会有刚刚安装Node的安装目录<strong>D:\Program\nodejs</strong>。</p><h1 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h1><pre><code>node -v</code></pre><h1 id="npm配置修改"><a href="#npm配置修改" class="headerlink" title="npm配置修改"></a>npm配置修改</h1><h2 id="查看全局包位置"><a href="#查看全局包位置" class="headerlink" title="查看全局包位置"></a>查看全局包位置</h2><pre><code>npm root -g</code></pre><h2 id="查看prefix和cache路径配置信息"><a href="#查看prefix和cache路径配置信息" class="headerlink" title="查看prefix和cache路径配置信息"></a>查看prefix和cache路径配置信息</h2><pre><code>npm config get cachenpm config get prefix</code></pre><h2 id="查看npm配置信息"><a href="#查看npm配置信息" class="headerlink" title="查看npm配置信息"></a>查看npm配置信息</h2><pre><code>npm config list</code></pre><h2 id="修改全局包默认安装位置"><a href="#修改全局包默认安装位置" class="headerlink" title="修改全局包默认安装位置"></a>修改全局包默认安装位置</h2><p>D:\Program\nodejs目录下新建目录node_global， 执行以下命令：</p><pre><code>npm config set prefix &quot;D:\Program\nodejs\node_global&quot;</code></pre><blockquote><p>注意： 将<strong>D:\Program\nodejs\node_global</strong> 和 <strong>D:\Program\nodejs\node_modules</strong>目录添加入环境变量PATH内。</p></blockquote><h2 id="修改cache默认安装位置"><a href="#修改cache默认安装位置" class="headerlink" title="修改cache默认安装位置"></a>修改cache默认安装位置</h2><p><strong>D:\Program\nodejs</strong>目录下新建目录<strong>node_cache</strong>， 执行以下命令：</p><pre><code>npm config set cache  &quot;D:\Program\nodejs\node_cache&quot;</code></pre><h1 id="设置npm镜像源"><a href="#设置npm镜像源" class="headerlink" title="设置npm镜像源"></a>设置npm镜像源</h1><pre><code>npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。&lt;/p&gt;
    
    </summary>
    
      <category term="sdd" scheme="https://github3982.github.io/categories/sdd/"/>
    
    
      <category term="Node" scheme="https://github3982.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node安装与使用</title>
    <link href="https://github3982.github.io/2019/08/10/node%20-%20%E5%89%AF%E6%9C%AC%20(7)/"/>
    <id>https://github3982.github.io/2019/08/10/node - 副本 (7)/</id>
    <published>2019-08-10T08:21:54.000Z</published>
    <updated>2019-09-21T09:30:05.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。</p><a id="more"></a><h1 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a>下载Node<br>软件， 安装到指定位置，如<strong>D:\Program\nodejs</strong>，安装完成后环境变量<strong>PATH</strong> 内会有刚刚安装Node的安装目录<strong>D:\Program\nodejs</strong>。</p><h1 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h1><pre><code>node -v</code></pre><h1 id="npm配置修改"><a href="#npm配置修改" class="headerlink" title="npm配置修改"></a>npm配置修改</h1><h2 id="查看全局包位置"><a href="#查看全局包位置" class="headerlink" title="查看全局包位置"></a>查看全局包位置</h2><pre><code>npm root -g</code></pre><h2 id="查看prefix和cache路径配置信息"><a href="#查看prefix和cache路径配置信息" class="headerlink" title="查看prefix和cache路径配置信息"></a>查看prefix和cache路径配置信息</h2><pre><code>npm config get cachenpm config get prefix</code></pre><h2 id="查看npm配置信息"><a href="#查看npm配置信息" class="headerlink" title="查看npm配置信息"></a>查看npm配置信息</h2><pre><code>npm config list</code></pre><h2 id="修改全局包默认安装位置"><a href="#修改全局包默认安装位置" class="headerlink" title="修改全局包默认安装位置"></a>修改全局包默认安装位置</h2><p>D:\Program\nodejs目录下新建目录node_global， 执行以下命令：</p><pre><code>npm config set prefix &quot;D:\Program\nodejs\node_global&quot;</code></pre><blockquote><p>注意： 将<strong>D:\Program\nodejs\node_global</strong> 和 <strong>D:\Program\nodejs\node_modules</strong>目录添加入环境变量PATH内。</p></blockquote><h2 id="修改cache默认安装位置"><a href="#修改cache默认安装位置" class="headerlink" title="修改cache默认安装位置"></a>修改cache默认安装位置</h2><p><strong>D:\Program\nodejs</strong>目录下新建目录<strong>node_cache</strong>， 执行以下命令：</p><pre><code>npm config set cache  &quot;D:\Program\nodejs\node_cache&quot;</code></pre><h1 id="设置npm镜像源"><a href="#设置npm镜像源" class="headerlink" title="设置npm镜像源"></a>设置npm镜像源</h1><pre><code>npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。&lt;/p&gt;
    
    </summary>
    
      <category term="sdd" scheme="https://github3982.github.io/categories/sdd/"/>
    
    
      <category term="Node" scheme="https://github3982.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node安装与使用</title>
    <link href="https://github3982.github.io/2019/08/10/node%20-%20%E5%89%AF%E6%9C%AC%20(6)/"/>
    <id>https://github3982.github.io/2019/08/10/node - 副本 (6)/</id>
    <published>2019-08-10T08:21:54.000Z</published>
    <updated>2019-09-21T09:30:05.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。</p><a id="more"></a><h1 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a>下载Node<br>软件， 安装到指定位置，如<strong>D:\Program\nodejs</strong>，安装完成后环境变量<strong>PATH</strong> 内会有刚刚安装Node的安装目录<strong>D:\Program\nodejs</strong>。</p><h1 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h1><pre><code>node -v</code></pre><h1 id="npm配置修改"><a href="#npm配置修改" class="headerlink" title="npm配置修改"></a>npm配置修改</h1><h2 id="查看全局包位置"><a href="#查看全局包位置" class="headerlink" title="查看全局包位置"></a>查看全局包位置</h2><pre><code>npm root -g</code></pre><h2 id="查看prefix和cache路径配置信息"><a href="#查看prefix和cache路径配置信息" class="headerlink" title="查看prefix和cache路径配置信息"></a>查看prefix和cache路径配置信息</h2><pre><code>npm config get cachenpm config get prefix</code></pre><h2 id="查看npm配置信息"><a href="#查看npm配置信息" class="headerlink" title="查看npm配置信息"></a>查看npm配置信息</h2><pre><code>npm config list</code></pre><h2 id="修改全局包默认安装位置"><a href="#修改全局包默认安装位置" class="headerlink" title="修改全局包默认安装位置"></a>修改全局包默认安装位置</h2><p>D:\Program\nodejs目录下新建目录node_global， 执行以下命令：</p><pre><code>npm config set prefix &quot;D:\Program\nodejs\node_global&quot;</code></pre><blockquote><p>注意： 将<strong>D:\Program\nodejs\node_global</strong> 和 <strong>D:\Program\nodejs\node_modules</strong>目录添加入环境变量PATH内。</p></blockquote><h2 id="修改cache默认安装位置"><a href="#修改cache默认安装位置" class="headerlink" title="修改cache默认安装位置"></a>修改cache默认安装位置</h2><p><strong>D:\Program\nodejs</strong>目录下新建目录<strong>node_cache</strong>， 执行以下命令：</p><pre><code>npm config set cache  &quot;D:\Program\nodejs\node_cache&quot;</code></pre><h1 id="设置npm镜像源"><a href="#设置npm镜像源" class="headerlink" title="设置npm镜像源"></a>设置npm镜像源</h1><pre><code>npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。&lt;/p&gt;
    
    </summary>
    
      <category term="sdd" scheme="https://github3982.github.io/categories/sdd/"/>
    
    
      <category term="Node" scheme="https://github3982.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node安装与使用</title>
    <link href="https://github3982.github.io/2019/08/10/node%20-%20%E5%89%AF%E6%9C%AC%20(5)/"/>
    <id>https://github3982.github.io/2019/08/10/node - 副本 (5)/</id>
    <published>2019-08-10T08:21:54.000Z</published>
    <updated>2019-09-21T09:30:05.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。</p><a id="more"></a><h1 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a>下载Node<br>软件， 安装到指定位置，如<strong>D:\Program\nodejs</strong>，安装完成后环境变量<strong>PATH</strong> 内会有刚刚安装Node的安装目录<strong>D:\Program\nodejs</strong>。</p><h1 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h1><pre><code>node -v</code></pre><h1 id="npm配置修改"><a href="#npm配置修改" class="headerlink" title="npm配置修改"></a>npm配置修改</h1><h2 id="查看全局包位置"><a href="#查看全局包位置" class="headerlink" title="查看全局包位置"></a>查看全局包位置</h2><pre><code>npm root -g</code></pre><h2 id="查看prefix和cache路径配置信息"><a href="#查看prefix和cache路径配置信息" class="headerlink" title="查看prefix和cache路径配置信息"></a>查看prefix和cache路径配置信息</h2><pre><code>npm config get cachenpm config get prefix</code></pre><h2 id="查看npm配置信息"><a href="#查看npm配置信息" class="headerlink" title="查看npm配置信息"></a>查看npm配置信息</h2><pre><code>npm config list</code></pre><h2 id="修改全局包默认安装位置"><a href="#修改全局包默认安装位置" class="headerlink" title="修改全局包默认安装位置"></a>修改全局包默认安装位置</h2><p>D:\Program\nodejs目录下新建目录node_global， 执行以下命令：</p><pre><code>npm config set prefix &quot;D:\Program\nodejs\node_global&quot;</code></pre><blockquote><p>注意： 将<strong>D:\Program\nodejs\node_global</strong> 和 <strong>D:\Program\nodejs\node_modules</strong>目录添加入环境变量PATH内。</p></blockquote><h2 id="修改cache默认安装位置"><a href="#修改cache默认安装位置" class="headerlink" title="修改cache默认安装位置"></a>修改cache默认安装位置</h2><p><strong>D:\Program\nodejs</strong>目录下新建目录<strong>node_cache</strong>， 执行以下命令：</p><pre><code>npm config set cache  &quot;D:\Program\nodejs\node_cache&quot;</code></pre><h1 id="设置npm镜像源"><a href="#设置npm镜像源" class="headerlink" title="设置npm镜像源"></a>设置npm镜像源</h1><pre><code>npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。&lt;/p&gt;
    
    </summary>
    
      <category term="sdd" scheme="https://github3982.github.io/categories/sdd/"/>
    
    
      <category term="Node" scheme="https://github3982.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node安装与使用</title>
    <link href="https://github3982.github.io/2019/08/10/node%20-%20%E5%89%AF%E6%9C%AC%20(4)/"/>
    <id>https://github3982.github.io/2019/08/10/node - 副本 (4)/</id>
    <published>2019-08-10T08:21:54.000Z</published>
    <updated>2019-09-21T09:30:05.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。</p><a id="more"></a><h1 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a>下载Node<br>软件， 安装到指定位置，如<strong>D:\Program\nodejs</strong>，安装完成后环境变量<strong>PATH</strong> 内会有刚刚安装Node的安装目录<strong>D:\Program\nodejs</strong>。</p><h1 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h1><pre><code>node -v</code></pre><h1 id="npm配置修改"><a href="#npm配置修改" class="headerlink" title="npm配置修改"></a>npm配置修改</h1><h2 id="查看全局包位置"><a href="#查看全局包位置" class="headerlink" title="查看全局包位置"></a>查看全局包位置</h2><pre><code>npm root -g</code></pre><h2 id="查看prefix和cache路径配置信息"><a href="#查看prefix和cache路径配置信息" class="headerlink" title="查看prefix和cache路径配置信息"></a>查看prefix和cache路径配置信息</h2><pre><code>npm config get cachenpm config get prefix</code></pre><h2 id="查看npm配置信息"><a href="#查看npm配置信息" class="headerlink" title="查看npm配置信息"></a>查看npm配置信息</h2><pre><code>npm config list</code></pre><h2 id="修改全局包默认安装位置"><a href="#修改全局包默认安装位置" class="headerlink" title="修改全局包默认安装位置"></a>修改全局包默认安装位置</h2><p>D:\Program\nodejs目录下新建目录node_global， 执行以下命令：</p><pre><code>npm config set prefix &quot;D:\Program\nodejs\node_global&quot;</code></pre><blockquote><p>注意： 将<strong>D:\Program\nodejs\node_global</strong> 和 <strong>D:\Program\nodejs\node_modules</strong>目录添加入环境变量PATH内。</p></blockquote><h2 id="修改cache默认安装位置"><a href="#修改cache默认安装位置" class="headerlink" title="修改cache默认安装位置"></a>修改cache默认安装位置</h2><p><strong>D:\Program\nodejs</strong>目录下新建目录<strong>node_cache</strong>， 执行以下命令：</p><pre><code>npm config set cache  &quot;D:\Program\nodejs\node_cache&quot;</code></pre><h1 id="设置npm镜像源"><a href="#设置npm镜像源" class="headerlink" title="设置npm镜像源"></a>设置npm镜像源</h1><pre><code>npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。&lt;/p&gt;
    
    </summary>
    
      <category term="sdd" scheme="https://github3982.github.io/categories/sdd/"/>
    
    
      <category term="Node" scheme="https://github3982.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node安装与使用</title>
    <link href="https://github3982.github.io/2019/08/10/node%20-%20%E5%89%AF%E6%9C%AC%20(3)/"/>
    <id>https://github3982.github.io/2019/08/10/node - 副本 (3)/</id>
    <published>2019-08-10T08:21:54.000Z</published>
    <updated>2019-09-21T09:30:05.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。</p><a id="more"></a><h1 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a>下载Node<br>软件， 安装到指定位置，如<strong>D:\Program\nodejs</strong>，安装完成后环境变量<strong>PATH</strong> 内会有刚刚安装Node的安装目录<strong>D:\Program\nodejs</strong>。</p><h1 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h1><pre><code>node -v</code></pre><h1 id="npm配置修改"><a href="#npm配置修改" class="headerlink" title="npm配置修改"></a>npm配置修改</h1><h2 id="查看全局包位置"><a href="#查看全局包位置" class="headerlink" title="查看全局包位置"></a>查看全局包位置</h2><pre><code>npm root -g</code></pre><h2 id="查看prefix和cache路径配置信息"><a href="#查看prefix和cache路径配置信息" class="headerlink" title="查看prefix和cache路径配置信息"></a>查看prefix和cache路径配置信息</h2><pre><code>npm config get cachenpm config get prefix</code></pre><h2 id="查看npm配置信息"><a href="#查看npm配置信息" class="headerlink" title="查看npm配置信息"></a>查看npm配置信息</h2><pre><code>npm config list</code></pre><h2 id="修改全局包默认安装位置"><a href="#修改全局包默认安装位置" class="headerlink" title="修改全局包默认安装位置"></a>修改全局包默认安装位置</h2><p>D:\Program\nodejs目录下新建目录node_global， 执行以下命令：</p><pre><code>npm config set prefix &quot;D:\Program\nodejs\node_global&quot;</code></pre><blockquote><p>注意： 将<strong>D:\Program\nodejs\node_global</strong> 和 <strong>D:\Program\nodejs\node_modules</strong>目录添加入环境变量PATH内。</p></blockquote><h2 id="修改cache默认安装位置"><a href="#修改cache默认安装位置" class="headerlink" title="修改cache默认安装位置"></a>修改cache默认安装位置</h2><p><strong>D:\Program\nodejs</strong>目录下新建目录<strong>node_cache</strong>， 执行以下命令：</p><pre><code>npm config set cache  &quot;D:\Program\nodejs\node_cache&quot;</code></pre><h1 id="设置npm镜像源"><a href="#设置npm镜像源" class="headerlink" title="设置npm镜像源"></a>设置npm镜像源</h1><pre><code>npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。&lt;/p&gt;
    
    </summary>
    
      <category term="sdd" scheme="https://github3982.github.io/categories/sdd/"/>
    
    
      <category term="Node" scheme="https://github3982.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node安装与使用</title>
    <link href="https://github3982.github.io/2019/08/10/node%20-%20%E5%89%AF%E6%9C%AC%20(10)/"/>
    <id>https://github3982.github.io/2019/08/10/node - 副本 (10)/</id>
    <published>2019-08-10T08:21:54.000Z</published>
    <updated>2019-09-21T09:30:05.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。</p><a id="more"></a><h1 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a>下载Node<br>软件， 安装到指定位置，如<strong>D:\Program\nodejs</strong>，安装完成后环境变量<strong>PATH</strong> 内会有刚刚安装Node的安装目录<strong>D:\Program\nodejs</strong>。</p><h1 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h1><pre><code>node -v</code></pre><h1 id="npm配置修改"><a href="#npm配置修改" class="headerlink" title="npm配置修改"></a>npm配置修改</h1><h2 id="查看全局包位置"><a href="#查看全局包位置" class="headerlink" title="查看全局包位置"></a>查看全局包位置</h2><pre><code>npm root -g</code></pre><h2 id="查看prefix和cache路径配置信息"><a href="#查看prefix和cache路径配置信息" class="headerlink" title="查看prefix和cache路径配置信息"></a>查看prefix和cache路径配置信息</h2><pre><code>npm config get cachenpm config get prefix</code></pre><h2 id="查看npm配置信息"><a href="#查看npm配置信息" class="headerlink" title="查看npm配置信息"></a>查看npm配置信息</h2><pre><code>npm config list</code></pre><h2 id="修改全局包默认安装位置"><a href="#修改全局包默认安装位置" class="headerlink" title="修改全局包默认安装位置"></a>修改全局包默认安装位置</h2><p>D:\Program\nodejs目录下新建目录node_global， 执行以下命令：</p><pre><code>npm config set prefix &quot;D:\Program\nodejs\node_global&quot;</code></pre><blockquote><p>注意： 将<strong>D:\Program\nodejs\node_global</strong> 和 <strong>D:\Program\nodejs\node_modules</strong>目录添加入环境变量PATH内。</p></blockquote><h2 id="修改cache默认安装位置"><a href="#修改cache默认安装位置" class="headerlink" title="修改cache默认安装位置"></a>修改cache默认安装位置</h2><p><strong>D:\Program\nodejs</strong>目录下新建目录<strong>node_cache</strong>， 执行以下命令：</p><pre><code>npm config set cache  &quot;D:\Program\nodejs\node_cache&quot;</code></pre><h1 id="设置npm镜像源"><a href="#设置npm镜像源" class="headerlink" title="设置npm镜像源"></a>设置npm镜像源</h1><pre><code>npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。&lt;/p&gt;
    
    </summary>
    
      <category term="sdd" scheme="https://github3982.github.io/categories/sdd/"/>
    
    
      <category term="Node" scheme="https://github3982.github.io/tags/Node/"/>
    
  </entry>
  
</feed>
