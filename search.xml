<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown 基本语法在 Ocean 中的展现形式]]></title>
    <url>2019/08/15/md/</url>
    <content type="text"><![CDATA[Markdown 基本语法在 Ocean 中的展现形式，此文完全是从 younghz/Markdown Clone 下来的，为了为自己查阅语法方便，也为想要使用 Ocean 的同学们提供示例，进而快速认知 Ocean 是否适合你的 Hexo ！ 主要内容 Markdown是什么？ 谁创造了它？ 为什么要使用它？ 怎么使用？ 谁在用？ 尝试一下 正文1. Markdown是什么？Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。 2. 谁创造了它？它由Aaron Swartz和John Gruber共同设计，Aaron Swartz就是那位于去年（2013年1月11日）自杀,有着开挂一般人生经历的程序员。维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。 他有着足以让你跪拜的人生经历： 14岁参与RSS 1.0规格标准的制订。 2004年入读斯坦福，之后退学。 2005年创建Infogami，之后与Reddit合并成为其合伙人。 2010年创立求进会（Demand Progress），积极参与禁止网络盗- 版法案（SOPA）活动，最终该提案被撤回。 2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并- - 以免费形式上传于网络被捕。 2013年1月自杀身亡。 天才都有早逝的归途。 3. 为什么要使用它？ 它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。 兼容HTML，可以转换为HTML格式发布。 跨平台使用。 越来越多的网站支持Markdown。 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail） 摆脱Word（我不是认真的）。 4. 怎么使用？ 如果不算扩展，Markdown的语法绝对简单到让你爱不释手。Markdown语法主要分为如下几大部分：标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’。 4.1 标题两种形式：1）使用=和-标记一级和二级标题。 一级标题=========二级标题--------- 效果： 一级标题 二级标题2）使用#，可表示1-6级标题。 一级标题 二级标题三级标题四级标题五级标题六级标题效果： 一级标题 二级标题三级标题四级标题五级标题六级标题4.2 段落段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。 4.3 区块引用在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如： 区块引用 嵌套引用 效果： 区块引用 嵌套引用 4.4 代码区块代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如普通段落： void main(){printf(“Hello, Markdown.”);} 代码区块： void main() { printf(“Hello, Markdown.”); }注意:需要和普通段落之间存在空行。 4.5 强调在强调内容两侧分别加上*或者_，如： 斜体，斜体粗体，粗体 效果： 斜体 *，_ 斜体 _ ** 粗体 **，__ 粗体 __ 4.6 列表使用·、+、或-标记无序列表，如： -（+） 第一项-（+） 第二项 （+*）第三项 注意：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。 效果： -（+） 第一项-（+） 第二项-（+*） 第三项 4.7 分割线分割线最常使用就是三个或以上*，还可以使用-和_。 4.8 链接链接可以由两种形式生成：行内式和参考式。行内式： [younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。 效果： younghz的Markdown库 参考式： [younghz的Markdown库1][1][younghz的Markdown库2][2][1]:https:://github.com/younghz/Markdown “Markdown”[2]:https:://github.com/younghz/Markdown “Markdown” 效果： [younghz的Markdown库1][1][younghz的Markdown库2][2][1]:https://github.com/younghz/Markdown “Markdown”[2]:https://github.com/younghz/Markdown “Markdown” 注意：上述的[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;不出现在区块中。 4.9 图片添加图片的形式和链接相似，只需在链接的基础上前方加一个！。 4.10 反斜杠\相当于反转义作用。使符号成为普通符号。 4.11 符号’`’起到标记作用。如： \`ctrl+a`\效果： ctrl+a 5. 谁在用？Markdown的使用者： GitHub 简书 Stack Overflow Apollo Moodle Reddit 等等 6. 尝试一下 Chrome下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。 在线的dillinger.io评价也不错 Windowns下的MarkdownPad也用过，不过免费版的体验不是很好。 Mac下的Mou是国人贡献的，口碑很好。 Linux下的ReText不错。 当然，最终境界永远都是笔下是语法，心中格式化 :)。 –注意：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber](http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/ )。 – 以上基本是所有traditonal markdown的语法。 其它： 列表的使用(非traditonal markdown)： 用|表示表格纵向边界，表头和表内容用-隔开，并可用:进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。 代码库 链接 MarkDown https://github.com/younghz/Markdown MarkDownCopy https://github.com/younghz/Markdown 关于其它扩展语法可参见具体工具的使用说明。]]></content>
      <tags>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fira Code | 为写程序而生的字体]]></title>
    <url>2019/08/12/FiraCode%E4%B8%BA%E5%86%99%E7%A8%8B%E5%BA%8F%E8%80%8C%E7%94%9F%E7%9A%84%E5%AD%97%E4%BD%93/</url>
    <content type="text"><![CDATA[程序员福利！！！今天为大家带来一个专为程序员写程序设计的字体 —— Fira Code Fira 是 Mozilla 公司（火狐浏览器她爹）主推的字体系列。Fira Code 是其中的一员，专为写程序而生。出来具有等宽等基本属性外，还加入了编程连字特性（ligatures）。 程序员福利！！！ 今天为大家带来一个专为程序员写程序设计的字体 —— Fira Code Fira 是 Mozilla 公司（火狐浏览器她爹）主推的字体系列。Fira Code 是其中的一员，专为写程序而生。出来具有等宽等基本属性外，还加入了编程连字特性（ligatures）。Fira Code 就是利用这个特性对编程中的常用符号进行优化，比如把输入的「!=」直接显示成「≠」或者把「&gt;=」变成「≥ 」等等，以此来提高代码的可读性。 #代码示例Ruby:JavaScript:Erlang:Elixir:Go:LiveScript:Clojure:Swift: #正文 安装 Fira Code 使用 .ttf 文件安装访问此网站 https://github.com/tonsky/FiraCode 找到 Download 这个链接，单击它。单击这个地址可以下载 v1.204 版的 Fira Code -&gt; Download v1.204 下载好后，解压它。 打开解压后得到的文件夹。 打开 /ttf文件夹。 会看到以下文件Ctrl+A 全选 -&gt; 右键 -&gt; 安装。 使用 Chocolate 安装关于 Chocolate，请参考这篇文章。 使用以下命令安装 $ choco install firacode 如何使用 只有以下编辑器、浏览器可以完美支持 Fira Code： 支持的编辑器 https://mogeko.me/2017/006/#%E6%94%AF%E6%8C%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8 VS Code 介绍一下在 VS Code 中如何配置（因为VS Code 是我主要使用的编辑器，别的不是很熟悉） 打开 VS Code。 文件 -&gt; 首选项 -&gt; 设置然后在右边的窗口中添加 &quot;editor.fontFamily&quot;: &quot;Fira Code&quot;, &quot;editor.fontLigatures&quot;: trueCtrl+S 保存。如果没有生效就使用以下代码 &quot;editor.fontFamily&quot;: &quot;&apos;Fira Code&apos;&quot;, &quot;editor.fontLigatures&quot;: trueCtrl+S 保存。 别的编辑器可以参考 -&gt; https://github.com/tonsky/FiraCode/wiki#how-to-enable-ligatures Chrome 可以将 Fira Code 设为 Chrome 的 等宽字体。 打开 Chrome。点击右上角的 ┇ -&gt; 设置 选择 自定义字体 宽度固定的字体 -&gt; 在下拉菜单中选择 Fira Code]]></content>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node安装与使用]]></title>
    <url>2019/08/10/node/</url>
    <content type="text"><![CDATA[本文介绍了Node的安装，npm全局包位置和cache默认安装位置的更改，以及设置npm镜像源加快包下载。 安装NodeNode官网下载Node软件， 安装到指定位置，如D:\Program\nodejs，安装完成后环境变量PATH 内会有刚刚安装Node的安装目录D:\Program\nodejs。 查看是否安装成功node -vnpm配置修改查看全局包位置npm root -g查看prefix和cache路径配置信息npm config get cache npm config get prefix查看npm配置信息npm config list修改全局包默认安装位置D:\Program\nodejs目录下新建目录node_global， 执行以下命令： npm config set prefix &quot;D:\Program\nodejs\node_global&quot; 注意： 将D:\Program\nodejs\node_global 和 D:\Program\nodejs\node_modules目录添加入环境变量PATH内。 修改cache默认安装位置D:\Program\nodejs目录下新建目录node_cache， 执行以下命令： npm config set cache &quot;D:\Program\nodejs\node_cache&quot;设置npm镜像源npm config set registry https://registry.npm.taobao.org --global npm config set disturl https://npm.taobao.org/dist --global]]></content>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>2019/08/08/hello-world/</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
